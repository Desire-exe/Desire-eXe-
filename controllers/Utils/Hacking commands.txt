const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);

if (messageBody.startsWith('.ping2')) {
  // react immediately
  await sock.sendMessage(chatId, { react: { text: "⚡", key: msg.key } });

  const args = messageBody.split(" ");
  const target = args[1];
  if (!target) {
    await sock.sendMessage(chatId, {
      text: 'Please provide a domain or IP. Example: `.ping google.com`'
    }, { quoted: msg });
    return;
  }

  try {
    // run ping 4 times
    const { stdout, stderr } = await execAsync(`ping -c 4 ${target}`);
    if (stderr) throw new Error(stderr);

    const pingResult = `*Ping Result for:* ${target}\n\`\`\`\n${stdout}\n\`\`\``;
    await sock.sendMessage(chatId, { text: pingResult }, { quoted: msg });
    await sock.sendMessage(chatId, { react: { text: "✅", key: msg.key } });
  } catch (err) {
    console.error('Ping error:', err);
    await sock.sendMessage(chatId, {
      text: `Failed to ping ${target}.`
    }, { quoted: msg });
    await sock.sendMessage(chatId, { react: { text: "❌", key: msg.key } });
  }
}

if (messageBody.startsWith('.whois2')) {
    await sock.sendMessage(chatId, { react: { text: "🕵️", key: msg.key } });

    const args = messageBody.split(" ");
    const ipAddress = args[1];

    if (!ipAddress) {
        await sock.sendMessage(chatId, { text: 'Please provide an IP address. Example: `.whois 8.8.8.8`' }, { quoted: msg });
        return;
    }

    try {
        console.log('IP Address:', ipAddress);  // Log the IP address to check its format

        const fetch = require('node-fetch');

        // Use an IP WHOIS service like ipinfo.io or ip-api.com
        const response = await fetch(`https://ipinfo.io/${ipAddress}/json`);

        console.log('Response Status:', response.status);

        if (!response.ok) {
            const errorText = await response.text();
            console.log('API Error Response:', errorText);
            throw new Error(`WHOIS lookup failed with status: ${response.status}`);
        }

        const data = await response.json();
        console.log('API Response:', data);  // Log the response for debugging

        if (!data || !data.ip) {
            throw new Error('Invalid IP WHOIS data received');
        }

        // Formatting WHOIS information for IP Address
        const ipWhoisInfo = `*WHOIS Info for IP:* ${ipAddress}
*IP Address:* ${data.ip || 'N/A'}
*City:* ${data.city || 'N/A'}
*Region:* ${data.region || 'N/A'}
*Country:* ${data.country || 'N/A'}
*Location:* ${data.loc || 'N/A'}
*Organization:* ${data.org || 'N/A'}
*Hostname:* ${data.hostname || 'N/A'}`;

        await sock.sendMessage(chatId, { text: ipWhoisInfo }, { quoted: msg });
        await sock.sendMessage(chatId, { react: { text: "✅", key: msg.key } });

    } catch (err) {
        console.error('WHOIS error:', err);
        await sock.sendMessage(chatId, { text: 'Failed to perform WHOIS lookup for the IP address.' }, { quoted: msg });
        await sock.sendMessage(chatId, { react: { text: "❌", key: msg.key } });
    }
}

if (messageBody.startsWith('.ping')) {
    await sock.sendMessage(chatId, { react: { text: "🏓", key: msg.key } });

    const args = messageBody.split(" ");
    const target = args[1];

    if (!target) {
        await sock.sendMessage(chatId, { text: 'Please provide an IP address or phone number to ping. Example: `.ping 8.8.8.8` or `.ping @user`' }, { quoted: msg });
        return;
    }

    // Check if the target is a valid IP address
    const ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    const isIP = ipRegex.test(target);

    if (isIP) {
        try {
            const { stdout, stderr } = await execAsync(`ping -c 4 ${target}`);
            if (stderr) throw new Error(stderr);

            const pingResult = `*Ping Result for IP:* ${target}\n\`\`\`\n${stdout}\n\`\`\``;
            await sock.sendMessage(chatId, { text: pingResult }, { quoted: msg });
            await sock.sendMessage(chatId, { react: { text: "✅", key: msg.key } });
        } catch (err) {
            console.error('Ping error:', err);
            const errorMsg = `Ping to ${target} failed. Possible reasons: Server not responding, blocked ICMP packets, or network issues.`;
            await sock.sendMessage(chatId, { text: errorMsg }, { quoted: msg });
            await sock.sendMessage(chatId, { react: { text: "❌", key: msg.key } });
        }
    } else {
        // If it's a phone number, simply mention the user
        const mention = `🏓 Pinging you, @${target}!`;
        await sock.sendMessage(chatId, { text: mention, mentions: [target] }, { quoted: msg });
        await sock.sendMessage(chatId, { react: { text: "✅", key: msg.key } });
    }
}


if (messageBody.startsWith('.ipinfo')) {
    await sock.sendMessage(chatId, { react: { text: "🔍", key: msg.key } });

    const args = messageBody.split(" ");
    const target = args[1];

    if (!target) {
        await sock.sendMessage(chatId, { text: 'Please provide an IP address. Example: `.ipinfo 8.8.8.8`' }, { quoted: msg });
        return;
    }

    // Validate the IP address format using a regex
    const ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;

    if (!ipRegex.test(target)) {
        await sock.sendMessage(chatId, { text: 'Please provide a valid IP address.' }, { quoted: msg });
        return;
    }

    // Fetch IP info from ipinfo.io API
    try {
        const response = await fetch(`https://ipinfo.io/${target}/json?token=YOUR_API_TOKEN`);
        const data = await response.json();

        if (response.ok && data) {
            const ipInfoResult = `*IP Info for:* ${target}\n\`\`\`\nCity: ${data.city}\nRegion: ${data.region}\nCountry: ${data.country}\nLocation: ${data.loc}\nOrganization: ${data.org}\nHostname: ${data.hostname || "N/A"}\n\`\`\``;
            await sock.sendMessage(chatId, { text: ipInfoResult }, { quoted: msg });
            await sock.sendMessage(chatId, { react: { text: "✅", key: msg.key } });
        } else {
            await sock.sendMessage(chatId, { text: `Failed to fetch IP info for ${target}.` }, { quoted: msg });
            await sock.sendMessage(chatId, { react: { text: "❌", key: msg.key } });
        }
    } catch (err) {
        console.error('IP info error:', err);
        await sock.sendMessage(chatId, { text: `Failed to retrieve IP info for ${target}.` }, { quoted: msg });
        await sock.sendMessage(chatId, { react: { text: "❌", key: msg.key } });
    }
}


if (messageBody.startsWith('.whois')) {
    await sock.sendMessage(chatId, { react: { text: "🔍", key: msg.key } });

    const args = messageBody.split(" ");
    const domain = args[1];

    if (!domain) {
        await sock.sendMessage(chatId, { text: 'Please provide a domain. Example: `.whois google.com`' }, { quoted: msg });
        return;
    }

    // Fetch WHOIS info from API Ninjas or any WHOIS service
    try {
        const response = await fetch(`https://api.api-ninjas.com/v1/whois?domain=${domain}`, {
            headers: {
                'X-Api-Key': 'YOUR_API_KEY' // Replace with your API key from API Ninjas
            }
        });

        if (!response.ok) {
            throw new Error('WHOIS lookup failed');
        }

        const data = await response.json();
        if (data && data.domain_name) {
            const whoisResult = `*WHOIS Info for Domain:* ${domain}\n\`\`\`\nRegistrar: ${data.registrar}\nCreation Date: ${new Date(data.creation_date * 1000).toLocaleString()}\nExpiration Date: ${new Date(data.expiration_date * 1000).toLocaleString()}\nName Servers: ${data.name_servers.join(", ")}\nOrganization: ${data.org || "N/A"}\nCountry: ${data.country || "N/A"}\nEmails: ${data.emails.join(", ") || "N/A"}\n\`\`\``;
            await sock.sendMessage(chatId, { text: whoisResult }, { quoted: msg });
            await sock.sendMessage(chatId, { react: { text: "✅", key: msg.key } });
        } else {
            await sock.sendMessage(chatId, { text: `Failed to fetch WHOIS information for ${domain}.` }, { quoted: msg });
            await sock.sendMessage(chatId, { react: { text: "❌", key: msg.key } });
        }
    } catch (err) {
        console.error('WHOIS error:', err);
        await sock.sendMessage(chatId, { text: `Error: Could not retrieve WHOIS data for ${domain}.` }, { quoted: msg });
        await sock.sendMessage(chatId, { react: { text: "❌", key: msg.key } });
    }
}


const dns = require('dns');

if (messageBody.startsWith('.dnslookup')) {
    await sock.sendMessage(chatId, { react: { text: "🌐", key: msg.key } });

    const args = messageBody.split(" ");
    const target = args[1];

    if (!target) {
        await sock.sendMessage(chatId, { text: 'Please provide an IP or domain name. Example: `.dnslookup google.com`' }, { quoted: msg });
        return;
    }

    try {
        // Perform DNS lookup for domain or IP address
        dns.lookup(target, (err, address, family) => {
            if (err) {
                await sock.sendMessage(chatId, { text: `Error: ${err.message}` }, { quoted: msg });
            } else {
                await sock.sendMessage(chatId, { text: `DNS lookup result for ${target}:\nIP Address: ${address}\nFamily: IPv${family}` }, { quoted: msg });
            }
        });

        // You can also use other DNS methods like resolve, reverse, etc. to get additional data
    } catch (err) {
        console.error(err);
        await sock.sendMessage(chatId, { text: `An error occurred: ${err.message}` }, { quoted: msg });
    }
}

const dns = require('dns');

if (messageBody.startsWith('.dnslookup')) {
    await sock.sendMessage(chatId, { react: { text: "🌐", key: msg.key } });

    const args = messageBody.split(" ");
    const target = args[1];

    if (!target) {
        await sock.sendMessage(chatId, { text: 'Please provide an IP or domain name. Example: `.dnslookup google.com`' }, { quoted: msg });
        return;
    }

    try {
        // Perform DNS lookup for domain or IP address
        dns.lookup(target, (err, address, family) => {
            if (err) {
                await sock.sendMessage(chatId, { text: `Error: ${err.message}` }, { quoted: msg });
            } else {
                await sock.sendMessage(chatId, { text: `DNS lookup result for ${target}:\nIP Address: ${address}\nFamily: IPv${family}` }, { quoted: msg });
            }
        });

        // You can also use other DNS methods like resolve, reverse, etc. to get additional data
    } catch (err) {
        console.error(err);
        await sock.sendMessage(chatId, { text: `An error occurred: ${err.message}` }, { quoted: msg });
    }

welcome and goodbye
anticall
auto type 
autorecord
molll

oll
antilink warn 
antilink delete 
antilink kick


